Whatis MicroService?
A microservice is an architectural style that structures an application as a collection of small, loosely coupled, and independently deployable services.
Each service in a microservice architecture is designed to perform a specific business function and can be developed, deployed, and scaled independently
 This is different from a monolithic architecture, where all the functionalities of an application are bundled into a single codebase.

 Key Characteristics of Microservices:
 Single Responsibility
 Independence and Decoupling
 Technology Diversity
 Scalability
 Data Decentralization

Aspect   	      Monolithic Architecture	       Microservice Architecture

Deployment	      Single codebase	               Independent deployment of services
Scaling	          Scale entire application	       Scale services independently
Technology        Often a single stack	           Multiple stacks possible
Faulttolerance    Single point of failure	       Isolated failures
Data management	  Centralized database	           Decentralized databases
Team structure	  Larger teams	                   Smaller, cross-functional teams




What is Docker?

Docker is an open-source platform designed to automate the deployment, scaling, and management of applications using containerization
 Containers allow developers to package an application and its dependencies (such as libraries, configurations, and binaries) into a single, 
 lightweight unit that can run consistently across different computing environments

 Key Concepts of Docker:
 Containers
 Containers are lightweight, standalone, and executable units that package software with everything needed to run: 
 code, libraries, runtime, system tools, and settings.

 Images:
 A Docker image is a read-only template used to create Docker containers. 
 It includes the application code, dependencies, libraries, and an operating system.
 Images are built from Dockerfiles and can be reused and shared through container registries like Docker Hub.

 Dockerfile
 A Dockerfile is a text file that contains instructions on how to build a Docker image
 It includes a step-by-step guide to assembling an image by defining the base image (e.g., Ubuntu, Node.js, Python), 
 copying application files, installing dependencies, and setting up configurations

 Basic example to builr docker file in react
 # Step 1: Use an official Node.js image as the base
FROM node:16 AS build

# Step 2: Set the working directory inside the container
WORKDIR /app

# Step 3: Copy package.json and package-lock.json
COPY package*.json ./

# Step 4: Install the dependencies
RUN npm install

# Step 5: Copy the rest of the application code
COPY . .

# Step 6: Build the React app for production
RUN npm run build

# Step 7: Use an Nginx image to serve the React app
FROM nginx:alpine

# Step 8: Copy the built app from the previous stage to Nginx's default html folder
COPY --from=build /app/build /usr/share/nginx/html

# Step 9: Expose port 80 to allow
